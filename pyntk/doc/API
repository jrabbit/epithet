*
**  A module is a class
*

A module must be wrapped inside one or more classes.
The costant variables is the only code allowed to float freely outside classes
definition.

If such object modularization is achieved, we'll be able to create mutiple pynktd class
instances, virtually link them, and easily run various tests on the whole
code. Moreover, the code will be easier to maintain.

We'll refer to "module class" as the main class of the module, f.e. "class
pkt" for pkt.py

*
**  Microthread
*

Every module is completely isolated from the others, the only form of
communication is through API calls and microthread messages.

*** Messages 

Every microthread module has its own `events' class instance:

	# Events class relative (see event.py)
	modA.events

	# List of modules listening to "even_name" of modA
	modA.events.listeners["event_name"] = [mod1, mod2, mod3, ...]

modA will send the event "event_name" to all the modules
listed in modA.events.listeners["event_name"]

The messages are useful for concurrent events, f.e. the `map' module will send
a message to the `route' one, each time a route changes. `route' can receive
many such messages. It will then queue and execute them whenever it can.
Generally, in ntkd, the write-only events are good candidates to be
implemented with messages.

*** API calls

main.py:
	n=ntkd()
	n.run()

ntkd.py:
    class ntkd:
    	def __init__(self):
		self.map  =map(self)
		self.radar=radar(self)
		self.qspn =qspn(self)
		self.andna=andna(self)
		...
qspn.py:
    class qspn:
    	def __init__(self, ntkd):
		self.ntkd=ntkd
		...

	def foobar(self):
		self.ntkd.map.node[i]	# we are accessing the map instance of
					# the `ntkd' instance
					# Using self.ntkd is the only way to
					# directly access to an external
					# module

This direct approach is used for non concurrent events, which are
generally read-only events, f.e. reading the map, the rnode list from the
radar, ...


****

Every module has its own ntk map.

****

The .conf file is just a .py file which is imported/executed.
